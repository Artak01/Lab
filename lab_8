Գրել ծրագիր, որը կգտնի NxM (N քանակությամբ տող և M քանակությամբ սյուն) չափանի մատրիցի մեծագույն արժեքը և կտպի էկրանին։
#include <iostream>

void scan(int mat[][10], int, int);
void print(int mat[][10], int, int);
int find(int mat[][10], int, int);


int main(){
    int mat[10][10];
    int row = 0; 
    int col = 0;
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row < 1 || row > 10);
    
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col < 1 || col > 10);
 

    scan(mat, row, col);
    print(mat, row, col);
    std::cout << "max = " << find(mat, row, col) << std::endl;
}


void scan(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}

int find(int mat[][10], int row, int col){
    int max = mat[0][0];
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
              if (mat[i][j] > max){
                    max = mat[i][j]; 
              }
         }
    }
    return max;

}


Գրել ծրագիր, որը կգտնի NxM (N քանակությամբ տող և M քանակությամբ սյուն) չափանի մատրիցի փոքրագույն արժեքի ինդեքսները և կտպի էկրանին։
#include <iostream>

void scan(int mat[][10], int, int);
void print(int mat[][10], int, int);
void find(int mat[][10], int, int);


int main(){
    int mat[10][10];
    int row = 0; 
    int col = 0;
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row < 1 || row > 10);
    
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col < 1 || col > 10);
 

    scan(mat, row, col);
    print(mat, row, col);
    find(mat, row, col);
}


void scan(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}

void find(int mat[][10], int row, int col){
    int min = mat[0][0];
    int k = 0; 
    int m = 0;
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
              if (mat[i][j] < min){
                    min = mat[i][j];
                    k = i;
                    m = j;
              }
         }
    }
    std::cout << "Matrix min index: " << k << " " << m << std::endl;

}


Իրականցնել ֆունկցիա, որը NxM (N քանակությամբ տող և M քանակությամբ սյուն) չափանի դինամիկ մատրիցի ցանկացած տողի 
մեծագույն արժեքների համար կստեղծի միաչափ դինամիկ զանգված։ Այսինքն միաչափ զանգվածի i ինդեքսի էլեմենտի արժեքը հավասար է լինելու 
մատրիցի i ինդեքսի տակ գտնվող տողի (միաչափ զանգվածի) մեծագույն արժեքին։
#include <iostream>

void scan(int**, int, int);
void print(int**, int, int);
void print(int*, int);
int max(int*, int);
int* creat(int**, int, int);

int main()
{
    srand(time(NULL));
    int row = 0;
    int col = 0;
    
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row <= 0);
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col <= 0);
    
    int** mat = new int*[row];
    for(int i = 0; i < row; ++i){
        mat[i] =  new int[col];
    }

    scan(mat, row, col);
    print(mat, row, col);
    int* arr = creat(mat, row, col);
    print(arr, row);

    for(int i = 0; i < row; ++i){
        delete[] mat[i];
    }
    delete[] mat;


    return 0;
}


void scan(int** mat, int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int** mat, int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            std::cout << mat[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

void print(int* arr, int size){
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}


int max(int* arr, int size){
    int MAX = arr[0];
    for(int i = 0; i < size; ++i){
        if (arr[i] > MAX){
            MAX = arr[i];
        }
    }
    return MAX;
}

int* creat(int** mat, int row, int col){
        int* arr = new int[row];
        for(int i = 0; i < row; ++i){
            arr[i] = max(mat[i], col);
        }
        return arr;
}



 Իրականացնել ծրագիր, որը քառակուսային մատրիցի գլխավոր անկյունագծից վերև կհաշվի բոլոր էլեմենտների գումարը։
#include <iostream>

void scan(int mat[][10], int, int);
void print(int mat[][10], int, int);
int sum(int mat[][10], int, int);


int main(){
    int mat[10][10];
    int row = 0; 
    int col = 0;
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row < 1 || row > 10);
    
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col < 1 || col > 10);
 

    scan(mat, row, col);
    print(mat, row, col);
    std::cout << "Sum: " << sum(mat, row, col) << std::endl;
}


void scan(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}

int sum(int mat[][10], int row, int col){
    int SUM = 0;
    for(int i = 0; i < row - 1; ++i){
         for(int j = i + 1; j < col; ++j){
              SUM += mat[i][j];
         }
    }
    return SUM;
}




 Իրականացնել ծրագիր, որը քառակուսային մատրիցի օժանդակ անկյունագծից վերև կհաշվի բոլոր էլեմենտների գումարը։

#include <iostream>

void scan(int mat[][10], int, int);
void print(int mat[][10], int, int);
int sum(int mat[][10], int, int);


int main(){
    int mat[10][10];
    int row = 0; 
    int col = 0;
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row < 1 || row > 10);
    
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col < 1 || col > 10);
 

    scan(mat, row, col);
    print(mat, row, col);
    std::cout << "Sum: " << sum(mat, row, col) << std::endl;
}


void scan(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}

int sum(int mat[][10], int row, int col){
    int SUM = 0;
    for(int i = 0; i < row - 1; ++i){
         for(int j = 0; j < col - i - 1; ++j){
              SUM += mat[i][j];
         }
    }
    return SUM;
}


 Իրականացնել ծրագիր, որը քառակուսային մատրիցի օժանդակ անկյունագծից ներքև կհաշվի բոլոր էլեմենտների գումարը։

  #include <iostream>

void scan(int mat[][10], int, int);
void print(int mat[][10], int, int);
int sum(int mat[][10], int, int);


int main(){
    int mat[10][10];
    int row = 0; 
    int col = 0;
    do{
        std::cout << "Enter row: ";
        std::cin >> row;
    }while(row < 1 || row > 10);
    
    do{
        std::cout << "Enter col: ";
        std::cin >> col;
    }while(col < 1 || col > 10);
 

    scan(mat, row, col);
    print(mat, row, col);
    std::cout << "Sum: " << sum(mat, row, col) << std::endl;
}


void scan(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
        for(int j = 0; j < col; ++j){
            mat[i][j] = rand()%10;
        }
    }
}

void print(int mat[][10], int row, int col){
    for(int i = 0; i < row; ++i){
         for(int j = 0; j < col; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}

int sum(int mat[][10], int row, int col){
    int SUM = 0;
    for(int i = 1; i < row; ++i){
         for(int j = col - i; j < col; ++j){
              SUM += mat[i][j];
         }
    }
    return SUM;
}


Անհրաժեշտ է կառուցել և արտածել nxn չափանի մատրից, որը ստացվում է 1-ից մինչև n*n ամբողջ թվերը հետևյալ հերթականությամբ այդ մատրիցում գրելուց. 
Սկզբում թվերը վերևից ներքև գրել առաջին սյունում, այնուհետև ներքևից վերև գրել երկրորդ սյունում, որից հետո վերևից ներքև գրել երրորդ սյունում և այդպես շարունակ մինչև մատրիցի վերջին սյունը: 
Օրինակ՝
4:46
n=4 դեպքում պետք է արտածել հետևյալ մատրիցը.
1 8  9 16
2 7 10 15
3 6 11 14
4 5 12 13

#include <iostream>

void scan(int mat[][10], int);
void print(int mat[][10], int);



int main(){
    int mat[10][10];
    int n = 0; 
    do{
        std::cout << "Enter size: ";
        std::cin >> n;
    }while(n < 1 || n > 10);
    
    scan(mat, n);
    print(mat, n);
}


void scan(int mat[][10], int n){
    int k = 1;
    for(int i = 0; i < n; ++i){
        if (i % 2 == 0){
            for(int j = 0; j < n; ++j){
                mat[j][i] = k;
                k++;
            }
        } else {
            for(int j = n - 1; j >= 0; --j){
                mat[j][i] = k;
                k++;
            }
        }
   }
   
}

void print(int mat[][10], int n){
    for(int i = 0; i < n; ++i){
         for(int j = 0; j < n; ++j){
             std::cout << mat[i][j] << " ";
         }
         std::cout << std::endl;
    }
    std::cout << std::endl;
}


