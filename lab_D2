Տրված են երեք բնական թվեր՝ a, b և c։ Օգտվելով Պյութագորասի թեորեմից, ստուգել արդյոք նշված երկարություններով կողերով եռանկյունը ուղղանկյուն եռանկյուն է։

#include <iostream>

int sqrt(int x){
    return x * x;
}

bool chack(int a, int b, int c){
    if (sqrt(a) + sqrt(b) == sqrt(c)){
        return true;
    }
    if (sqrt(a) + sqrt(c) == sqrt(b)){
        return true;
    }
    if (sqrt(c) + sqrt(b) == sqrt(a)){
        return true;
    }
    return false;
}


int main(){
    int a = 0;
    int b = 0; 
    int c = 0;
    std::cout << "Enter side of triangle: ";
    std::cin >> a >> b >> c;
    if (chack(a, b, c)){
        std::cout << "klini!!" << std::endl;
    } else {
        std::cout << "chei lini!!" << std::endl;
    }
    return 0;
}

Գրել ֆունկցիա, որը ստանում է a և b թվերը(որտեղ a-ն ուղղանկյուն եռանկյան դիմացի էջն է, իսկ  b-ն ուղղանկյուն եռանկյան կից էջը) հաշվել և 
վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան սինուսը(sin)




Գրել ֆունկցիա, որը ստանում է a և b թվերը(որտեղ a-ն ուղղանկյուն եռանկյան դիմացի էջն է, իսկ  b-ն ուղղանկյուն եռանկյան կից էջը) հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան կոսինուսը(cos)
Գրել ֆունկցիա, որը ստանում է a և b թվերը(որտեղ a-ն ուղղանկյուն եռանկյան դիմացի էջն է, իսկ  b-ն ուղղանկյուն եռանկյան կից էջը) հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան տանգենսը(tg)
Գրել ֆունկցիա, որը ստանում է a և b թվերը(որտեղ a-ն ուղղանկյուն եռանկյան դիմացի էջն է, իսկ  b-ն ուղղանկյուն եռանկյան կից էջը) հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան կոտանգենսը(ctg).


Գրել ֆունկցիա, որը որպես արգումենտ կստանա թիվ և կվերադարձնի true, եթե թիվը կատարյալ(perfect) է, հակառակ դեպքում false.

#include <iostream>

bool prfect(int num){
    if (num < 6){
        return false;
    }
    int sum = 0;
    for(int i = 1; i <= num/2; ++i){
        if (num % i == 0){
            sum += i;
        }
    }
    return (sum == num);
}

void foo(){
    for(int i = 0; i < 10000; ++i){
        if(prfect(i)){
            std::cout << i << " ";
        }
    }
}

int main()
{
    // int num = 0;
    // std::cout << "Enter the number: ";
    // std::cin >> num;
    foo();

    return 0;
}


Իրականացրե՛ք n-րդ պարզ թիվը գտնելու ֆունկցիա:
#include <iostream>

bool is_prime(int num){
    if (num < 2){
        return false;
    }
    for(int i = 2; i <= num/2; ++i){
        if (num % i == 0){
            return false;
        }
    }
    return true;
}

int foo(int n){
    if (n < 1){
        return n;
    }
    int i = 2;
    int x = 0;
    int k = n + 1;
    while(i != k){
        if(is_prime(i)){
            x = i;
        }
        ++i;
    }
    return x;
}

int main()
{
    
    std::cout << foo(15);

    return 0;
}




en gumaryy

#include <iostream>

int fac(int num){
    if (num == 0 || num == 1){
        return 1;
    }
    return num * fac(num - 1);
}

double power(int num, int x){
    if (x == 0){
        return 1;
    }
    return num * power(num, x - 1);
}

double foo(int i, int x){
    int k = (i & 1) ? -1 : 1;
    return k * (power(x, i + 1)/(fac(3 * i) + power(2, i + 1)));
}


double sum(int n, int x){
    int i = 1;
    double s = 0;
    while(i <= n){
        s += foo(i, x);
        ++i;
    }
    return s;
}

int main()
{
    int n = 0;
    int x = 0;
    std::cout << "Enter: ";
    std::cin >> n >> x;
    std::cout << sum(n, x);

    return 0;
}
