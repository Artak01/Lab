Տրված է բնական թիվ: Արտածել YES, եթե
ա) թվի թվանշանների մեջ կա 3 թվանշան,
բ) թվի թվանշանների մեջ չկա 5 թվանշան,
գ) թվի թվանշանները աճման կարգով են դասավորված,
դ) թվի թվանշանները նվազման կարգով չեն դասավորված,
ե) թվի թվանշանների գումարը մեծ է քսանից,
զ) թվի թվանշանների արտադրյալը փոքր է երեսունից:


#include <iostream> 
 
bool ka_3(int num){ 
    while(num){ 
        if (num %3 == 0){ 
            return true; 
        } 
        num /= 10; 
    } 
    return false; 
} 
 
bool chka_5(int num){ 
    while(num){ 
        if (num %5 == 0){ 
            return false; 
        } 
        num /= 10; 
    } 
    return true; 
} 
 
bool aj(int num){ 
    int a = num % 10; 
    num /= 10; 
    while(num){ 
        int b = num % 10; 
        if (a <= b){ 
            return false; 
        } 
        a = b; 
        num /= 10; 
    } 
    return true; 
} 
 
bool aj_2(int num){ 
    int a = num % 10; 
    num /= 10; 
    while(num){ 
        int b = num % 10; 
        if (a < b){ 
            return false; 
        } 
        a = b; 
        num /= 10; 
    } 
    return true; 
} 
 
bool mec_20(int num){ 
    int sum = 0; 
    while(num){ 
        sum += num % 10; 
        num /= 10; 
    } 
    return sum > 20; 
} 
 
bool poqr_30(int num){ 
    int mul = 1; 
    while(num){ 
        mul *= num % 10; 
        num /= 10; 
    } 
    return mul < 30; 
} 
 
 
int main() 
{ 
    int num = 0; 
    std::cout << "Enter the number: "; 
    std::cin >> num; 
    const int size = 6; 
    bool (*ptr[size])(int) = {ka_3, chka_5, aj, aj_2, mec_20, poqr_30}; 
    for(int i = 0; i < size; ++i){ 
        if (ptr[i](num)){ 
            std::cout << "Yes" << std::endl;  
        }else{ 
            std::cout << "No" << std::endl; 
        } 
    } 
 
 
    return 0; 
}


n թվանշան ունեցող բնական թիվը կոչվում է Արմսթրոնգի թիվ, եթե նրա թվանշանների n աստիճանների գումարը հավասար է
այդ թվին (օրինակ՝ 153=1^3 +5^3 +3^3 :disappointed: Ներմուծել թիվ, արտածել YES եթե այն հանդիսանում է 
Արմսթրոնգի թիվ, և NO հակառակ դեպքում։

#include <iostream>

int n_count(int num){
    int count = 0;
    while(num){
        count++;
        num /= 10;
    }
    return count;
}

int power(int num, int a){
    int tmp = num;
    for(int i = 1; i < a; ++i){
        tmp *= num;
    }
    return tmp;
}

bool arm(int num){
    if (num > 1 && num < 10){
        return false;
    }
    int tmp = num;
    int sum = 0;
    int count = n_count(num);
    while(tmp){
        sum += power((tmp % 10), count);
        tmp /= 10;
    }
    if (sum == num){
        return true;
    } else {
        return false;
    }
}

void find_arm_num(){
    for(int i = 0; i < 10000; ++i){
        if (arm(i)){
            std::cout << i << " ";
        }
    }
}

int main()
{
    find_arm_num();

    return 0;
}
