Իրականացնել ֆունկցիա, որը ստանում է ամբողջ թվային պարամետր և վերադարձնում է n-րդ Ֆիբոնաչիի թիվը։
#include <iostream>

int fib(int n){
    int a = 0; 
    int b = 1;
    while(n != 2){
        int tmp = a + b;
        a = b;
        b = tmp;
        n--;
    }
    return b;
}

int main()
{
    std::cout <<"fib = " << fib(5);

    return 0;
}


Table of a Number: Գրել ֆունկցիա, որը կտպի տրված թվի բազմապատկման աղյուսակը։
#include <iostream>

int main(){
    
    int n = 0;
    std::cin >> n;
    int end = 10;
    for(int i = 0; i <= end; ++i){
        std::cout << n << " * " << i << " = " << n * i << std::endl;
    }
}


Գրել տրված թվի ֆակտորիալը հաշվող իտերատիվ ֆունկցիա։
#include <iostream>

int foo(int n){
    if(n == 0 || n == 1){
        return 1;
    } else if(n < 0){
        return -1;
    }
    int sum = 1;
    for(int i = 1; i <= n; ++i){
        sum *= i;
    }
    return sum;
}

int main(){
    int n = 0;
    std::cin >> n;
    std::cout << "x = " << foo(n);
}

Իրականացնել ֆունկցիա, որն ընդունում է թիվ և վերադարձնում նրա թվանշանների գումարը:
#include <iostream>

int foo(int n){
    int sum = 0; 
    
    while(n != 0){
        sum  += n %10;
        n/=10;
        
    }
    return sum;
}

int main(){
    int n = 0;
    std::cin >> n;
    std::cout << "x = " << foo(n);
}


Իրականացնել ֆունկցիա, որը ստուգում է՝ թիվը պարզ է, թե ո։ Պարզ է համարվում այն թիվը, 
որը առանց մնացորդ կարող է բաժանվել ինքը իր վրա և մեկի վրա (մեկը պարզ թիվ չէ)։
#include <iostream>


bool is_prime(int n){
    if (n <= 1){
        return 0;
    } 
    for(int i = 2; i*i <= n; ++i){
        if (n%i == 0){
            return 0;
        }
    }
    return 1;
}

int main(){
    int n = 0; 
    std::cout << "Number: ";
    std::cin >> n;
    if(is_prime(n)){
        std::cout << "Is prime!";
    } else {
        std::cout << "Is not prime!";
    }
}

Իրականացնել int տիպի արժեք վերադարձնող ֆունկցիա, որը վերադարձնում է՝ 1, 
եթե ֆունկցային փոխանցված ամբողջ թիվը կարող է արտահայտվել երկու պարզ թվերի գումարով, հակառակ դեպքում ֆունկցիան կվերադարձնի՝ 0:
